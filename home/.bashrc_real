# ~/.bashrc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# WTF Arch.  Why are you setting this????
export PROMPT_COMMAND=

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -e ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -e /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Editor
# Install:
#   pacman -S vim
if [ -e /usr/bin/vim ]; then
  export EDITOR=vim
fi

# rbenv
# Install:
#   git clone https://github.com/sstephenson/rbenv.git $HOME/pkg/rbenv
#   git clone https://github.com/sstephenson/ruby-build.git $HOME/pkg/rbenv/plugins/ruby-build
# if [ -d $HOME/pkg/rbenv ]; then
#   export RBENV_ROOT="$HOME/pkg/rbenv"
#   export "PATH=$RBENV_ROOT/bin:$PATH"
#   eval "$(rbenv init -)"
# fi

# pyenv
#   git clone https://github.com/yyuu/pyenv.git $HOME/pkg/pyenv
if [ -d $HOME/pkg/pyenv ]; then
  export PYENV_ROOT="$HOME/pkg/pyenv"
  export "PATH=$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

# nodenv
#  git clone https://github.com/nodenv/nodenv.git $HOME/pkg/nodenv
#  git clone https://github.com/nodenv/node-build.git $HOME/pkg/nodenv/plugins/node-build
if [ -d $HOME/pkg/nodenv ]; then
  export NODENV_ROOT="$HOME/pkg/nodenv"
  export "PATH=$NODENV_ROOT/bin:$PATH"
  eval "$(nodenv init -)"
fi

# Go Language
# Install:
#   pacman -S go
#   mkdir "$HOME/pkg/go"
export GOPATH="$HOME/pkg/go"

# Google Cloud SDK
# Install:
#   curl https://sdk.cloud.google.com | CLOUDSDK_PYTHON=python2.7 bash
#   gcloud auth login
if [ -d $HOME/pkg/google-cloud-sdk ]; then
  # Make sure we are using the correct version of Python
  export CLOUDSDK_PYTHON=python2.7

  # The next line updates PATH for the Google Cloud SDK.
  source "$HOME/pkg/google-cloud-sdk/path.bash.inc"

  # The next line enables bash completion for gcloud.
  source "$HOME/pkg/google-cloud-sdk/completion.bash.inc"
fi

# Guix
#   yaourt -S guix
if [ -d $HOME/.guix-profile ]; then
  export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale
  #xset +fp ~/.guix-profile/share/fonts/truetype
  GUIX_PROFILE="$HOME/.guix-profile" source "$HOME/.guix-profile/etc/profile"
fi

# GPG Agent
update_gpg() {
  echo UPDATESTARTUPTTY | gpg-connect-agent
}

start_gpg() {
  if pgrep gpg-agent; then
    pkill gpg-agent
  else
    eval $(gpg-agent --enable-ssh-support --pinentry-program /usr/bin/pinentry-curses --log-file /home/mikekchar/gpg-log --daemon)
    update_gpg
    echo "Prompts for passwords will appear in this window.  To change,"
    echo "enter another window and run 'update_gpg'"
  fi
}

# On a system where GPG Agent should be running
if pgrep gpg-agent; then
  echo "gpg-agent is running, but prompts won't appear in this window.  If you"
  echo "wish prompts to appear in this window, run 'update_gpg'"
else
  echo "gpg-agent is not running.  If you wish to start it, type 'start_gpg'"
fi

# Completion for colour themes
complete_change_theme() {
  pushd "$HOME/.Xresources.d/colors" >/dev/null
  COMPREPLY=( $( compgen -G "$2*" $2 ) )
  popd >/dev/null
  return 0
}

complete -o nospace -F complete_change_theme theme 

# Completion for terminal themes
complete_terminal_theme() {
  pushd "$HOME/.terminal-colors" >/dev/null
  COMPREPLY=( $( compgen -G "$2*" $2 ) )
  popd >/dev/null
  return 0
}

complete -o nospace -F complete_terminal_theme terminal_theme

# Fix reparenting issue with java and window manager
export _JAVA_AWT_WM_NONREPARENTING=1

# Finally a bin directory to override anything.  Always put this last.
if [ -d "$HOME/.bin" ]; then
  export PATH="$HOME"/.bin:"$PATH"
fi
